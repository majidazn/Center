// <auto-generated />
using System;
using Center.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Center.DataAccess.Migrations
{
    [DbContext(typeof(CenterBoundedContextCommand))]
    [Migration("20210710065113_intial_audit")]
    partial class intial_audit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AuditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CenterGroup")
                        .HasColumnType("int");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<string>("EnName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FinanchialCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("HostName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("Logo")
                        .HasMaxLength(100000)
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SepasCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Status");

                    b.HasIndex("TenantId")
                        .IsUnique()
                        .HasFilter("[TenantId] IS NOT NULL");

                    b.ToTable("Centers", "Center");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "تهران - ضلع شمال غربی میدان فردوسی ساختمان شهد پلاک 21",
                            AuditId = new Guid("7f30cb5e-83fa-44b1-8bce-24e83f8bb7bf"),
                            CenterGroup = 131,
                            City = 1406,
                            EnName = "EPD2",
                            FinanchialCode = "411131341944",
                            HostName = "localhost:44305",
                            Name = "شرکت اطلاع رسانی پیوند داده ها",
                            NationalCode = "461685665",
                            Status = (byte)0,
                            TenantId = 1,
                            Title = 116,
                            ValidFrom = new DateTimeOffset(new DateTime(2021, 7, 10, 11, 21, 12, 554, DateTimeKind.Unspecified).AddTicks(5084), new TimeSpan(0, 4, 30, 0, 0)),
                            ZipCode = "1599945549"
                        });
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.CenterCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AuditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Insur")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("Status");

                    b.ToTable("CenterCodes", "Center");
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.CenterRefer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("AuditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("UrlType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("Status");

                    b.ToTable("CenterRefers", "Center");
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.CenterTelecom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AuditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("TellNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("Status");

                    b.ToTable("CenterTelecoms", "Center");
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.ElectronicAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AuditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("EAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("EType")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("Status");

                    b.ToTable("ElectronicAddresses", "Center");
                });

            modelBuilder.Entity("Center.Domain.CenterVariableAggregate.Entities.CenterVariable", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AuditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("EnName")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<byte[]>("Icon")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("InternalUsage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ShortKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("Status");

                    b.ToTable("CenterVariables", "Center");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuditId = new Guid("dd1baed9-547e-4233-b3c1-a235fa14744c"),
                            Code = 0,
                            EnName = "Root",
                            InternalUsage = 0,
                            Name = "Root",
                            ParentId = 1,
                            Sort = 0,
                            Status = (byte)2
                        },
                        new
                        {
                            Id = 2,
                            AuditId = new Guid("76e49cda-adee-42e7-a0a9-abd97d5f58d0"),
                            Code = 0,
                            EnName = "Used in the App",
                            InternalUsage = 0,
                            Name = "مورد استفاده در برنامه",
                            ParentId = 1,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 3,
                            AuditId = new Guid("730fcddd-b6ab-4560-80b8-9ef443abbc8b"),
                            Code = 0,
                            EnName = "EPD",
                            InternalUsage = 0,
                            Name = "پیوند",
                            ParentId = 2,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 4,
                            AuditId = new Guid("4699cf66-0541-41d7-aef7-7bc87fd3fba6"),
                            Code = 0,
                            EnName = "Centers",
                            InternalUsage = 0,
                            Name = "مراکز",
                            ParentId = 2,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 5,
                            AuditId = new Guid("79f10363-4e48-4069-bb59-a1f8f303ea12"),
                            Code = 0,
                            EnName = "Patient",
                            InternalUsage = 0,
                            Name = "بیمار",
                            ParentId = 2,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 6,
                            AuditId = new Guid("3199943e-4eaf-40de-b03a-8b29e7f32005"),
                            Code = 0,
                            EnName = "Centers-EPD",
                            InternalUsage = 0,
                            Name = "پیوند-مراکز",
                            ParentId = 2,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 7,
                            AuditId = new Guid("48ec9e8e-2ca7-45ae-9070-24a9138a6b33"),
                            Code = 0,
                            EnName = "WorkHour",
                            InternalUsage = 0,
                            Name = "گزارش عملکرد",
                            ParentId = 2,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 10,
                            AuditId = new Guid("d159422d-ceac-482b-a1e6-257f58ab1014"),
                            Code = 0,
                            EnName = "Main Group Application",
                            InternalUsage = 0,
                            Name = "گروه اصلی برنامه ها",
                            ParentId = 1,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 20,
                            AuditId = new Guid("32a373e8-1c2d-4b75-827b-d18f8e42d7ae"),
                            Code = 0,
                            EnName = "Center Group",
                            InternalUsage = 0,
                            Name = "گروه مرکز",
                            ParentId = 1,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 22,
                            AuditId = new Guid("dfb049a2-36ae-4615-8519-d746b589007e"),
                            Code = 0,
                            EnName = "Center Title",
                            InternalUsage = 0,
                            Name = "ماهیت مرکز",
                            ParentId = 1,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 23,
                            AuditId = new Guid("146e41e5-87b2-490b-93da-f3e06dff8358"),
                            Code = 0,
                            EnName = "HIS Web",
                            InternalUsage = 0,
                            Name = "HIS Web",
                            ParentId = 10,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 24,
                            AuditId = new Guid("4a41b06c-1a1c-40aa-a87a-92d1022e3ef5"),
                            Code = 0,
                            EnName = "HIS Cloud",
                            InternalUsage = 0,
                            Name = "HIS Cloud",
                            ParentId = 10,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 25,
                            AuditId = new Guid("f4e90167-1ed4-4b2a-ae80-ddfecf06d897"),
                            Code = 0,
                            EnName = "Utilities under the Cloud",
                            InternalUsage = 0,
                            Name = "برنامه های کمکی تحت Cloud",
                            ParentId = 10,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 26,
                            AuditId = new Guid("f0f47b55-19f8-492a-9eb7-8628ddac64fe"),
                            Code = 0,
                            EnName = "HIS Windows Base",
                            InternalUsage = 0,
                            Name = "HIS Windows Base",
                            ParentId = 10,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 27,
                            AuditId = new Guid("627fdae4-3f6f-4f99-bcc1-a990fc3a945a"),
                            Code = 0,
                            EnName = "MIS",
                            InternalUsage = 0,
                            Name = "MIS",
                            ParentId = 10,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 28,
                            AuditId = new Guid("95d6045f-49dc-4b46-8a47-2f0263d57712"),
                            Code = 0,
                            EnName = "Pacs",
                            InternalUsage = 0,
                            Name = "Pacs",
                            ParentId = 10,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 116,
                            AuditId = new Guid("822fb26b-7656-4f5d-b4ec-f6046ac53fd2"),
                            Code = 0,
                            EnName = "Other",
                            InternalUsage = 0,
                            Name = "سایر",
                            ParentId = 22,
                            Sort = 0,
                            Status = (byte)0
                        },
                        new
                        {
                            Id = 131,
                            AuditId = new Guid("00a42509-bf52-411a-915d-a849599dd4ac"),
                            Code = 0,
                            EnName = "Other centers",
                            InternalUsage = 0,
                            Name = "سایر مراکز دانشگاهی",
                            ParentId = 20,
                            Sort = 0,
                            Status = (byte)0
                        });
                });

            modelBuilder.Entity("Center.Domain.SharedKernel.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AuditId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("CenterVariableId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CenterVariableId");

                    b.HasIndex("Status");

                    b.ToTable("Activities", "Center");
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.Center", b =>
                {
                    b.OwnsOne("Framework.AuditBase.DomainDrivenDesign.AuditBase", "AuditBase", b1 =>
                        {
                            b1.Property<int>("CenterId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("LastModifiedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("OperatorId")
                                .HasColumnType("int");

                            b1.HasKey("CenterId");

                            b1.ToTable("Centers");

                            b1.WithOwner()
                                .HasForeignKey("CenterId");
                        });

                    b.Navigation("AuditBase");
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.CenterCode", b =>
                {
                    b.HasOne("Center.Domain.CenterAggregate.Entities.Center", null)
                        .WithMany("CenterCodes")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Framework.AuditBase.DomainDrivenDesign.AuditBase", "AuditBase", b1 =>
                        {
                            b1.Property<int>("CenterCodeId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("LastModifiedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("OperatorId")
                                .HasColumnType("int");

                            b1.HasKey("CenterCodeId");

                            b1.ToTable("CenterCodes");

                            b1.WithOwner()
                                .HasForeignKey("CenterCodeId");
                        });

                    b.Navigation("AuditBase");
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.CenterRefer", b =>
                {
                    b.HasOne("Center.Domain.CenterAggregate.Entities.Center", null)
                        .WithMany("CenterRefers")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Framework.AuditBase.DomainDrivenDesign.AuditBase", "AuditBase", b1 =>
                        {
                            b1.Property<int>("CenterReferId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("LastModifiedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("OperatorId")
                                .HasColumnType("int");

                            b1.HasKey("CenterReferId");

                            b1.ToTable("CenterRefers");

                            b1.WithOwner()
                                .HasForeignKey("CenterReferId");
                        });

                    b.Navigation("AuditBase");
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.CenterTelecom", b =>
                {
                    b.HasOne("Center.Domain.CenterAggregate.Entities.Center", null)
                        .WithMany("CenterTelecoms")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Framework.AuditBase.DomainDrivenDesign.AuditBase", "AuditBase", b1 =>
                        {
                            b1.Property<int>("CenterTelecomId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("LastModifiedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("OperatorId")
                                .HasColumnType("int");

                            b1.HasKey("CenterTelecomId");

                            b1.ToTable("CenterTelecoms");

                            b1.WithOwner()
                                .HasForeignKey("CenterTelecomId");
                        });

                    b.Navigation("AuditBase");
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.ElectronicAddress", b =>
                {
                    b.HasOne("Center.Domain.CenterAggregate.Entities.Center", null)
                        .WithMany("ElectronicAddresses")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Framework.AuditBase.DomainDrivenDesign.AuditBase", "AuditBase", b1 =>
                        {
                            b1.Property<int>("ElectronicAddressId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("LastModifiedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("OperatorId")
                                .HasColumnType("int");

                            b1.HasKey("ElectronicAddressId");

                            b1.ToTable("ElectronicAddresses");

                            b1.WithOwner()
                                .HasForeignKey("ElectronicAddressId");
                        });

                    b.Navigation("AuditBase");
                });

            modelBuilder.Entity("Center.Domain.CenterVariableAggregate.Entities.CenterVariable", b =>
                {
                    b.HasOne("Center.Domain.CenterVariableAggregate.Entities.CenterVariable", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.OwnsOne("Framework.AuditBase.DomainDrivenDesign.AuditBase", "AuditBase", b1 =>
                        {
                            b1.Property<int>("CenterVariableId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("LastModifiedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("OperatorId")
                                .HasColumnType("int");

                            b1.HasKey("CenterVariableId");

                            b1.ToTable("CenterVariables");

                            b1.WithOwner()
                                .HasForeignKey("CenterVariableId");
                        });

                    b.Navigation("AuditBase");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Center.Domain.SharedKernel.Entities.Activity", b =>
                {
                    b.HasOne("Center.Domain.CenterAggregate.Entities.Center", null)
                        .WithMany("Activities")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Center.Domain.CenterVariableAggregate.Entities.CenterVariable", "CenterVariable")
                        .WithMany("Activities")
                        .HasForeignKey("CenterVariableId");

                    b.OwnsOne("Framework.AuditBase.DomainDrivenDesign.AuditBase", "AuditBase", b1 =>
                        {
                            b1.Property<int>("ActivityId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTimeOffset>("CreatedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("LastModifiedDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<int?>("OperatorId")
                                .HasColumnType("int");

                            b1.HasKey("ActivityId");

                            b1.ToTable("Activities");

                            b1.WithOwner()
                                .HasForeignKey("ActivityId");
                        });

                    b.Navigation("AuditBase");

                    b.Navigation("CenterVariable");
                });

            modelBuilder.Entity("Center.Domain.CenterAggregate.Entities.Center", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("CenterCodes");

                    b.Navigation("CenterRefers");

                    b.Navigation("CenterTelecoms");

                    b.Navigation("ElectronicAddresses");
                });

            modelBuilder.Entity("Center.Domain.CenterVariableAggregate.Entities.CenterVariable", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
